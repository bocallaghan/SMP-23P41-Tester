
/* Copyright (c) Sybase, Inc. 2010-2013   All rights reserved.
 
 In addition to the license terms set out in the Sybase License Agreement for
 the Sybase Unwired Platform ("Program"), the following additional or different
 rights and accompanying obligations and restrictions shall apply to the source
 code in this file ("Code").  Sybase grants you a limited, non-exclusive,
 non-transferable, revocable license to use, reproduce, and modify the Code
 solely for purposes of (i) maintaining the Code as reference material to better
 understand the operation of the Program, and (ii) development and testing of
 applications created in connection with your licensed use of the Program.
 The Code may not be transferred, sold, assigned, sublicensed or otherwise
 conveyed (whether by operation of law or otherwise) to another party without
 Sybase's prior written consent.  The following provisions shall apply to any
 modifications you make to the Code: (i) Sybase will not provide any maintenance
 or support for modified Code or problems that result from use of modified Code;
 (ii) Sybase expressly disclaims any warranties and conditions, express or
 implied, relating to modified Code or any problems that result from use of the
 modified Code;OT BE LIABLE FOR ANY LOSS OR DAMAGE RELATING
 TO MODIFICATIONS MADE TO THE CODE OR FOR ANY DAMAGES RESULTING FROM USE OF THE
 MODIFIED CODE, INCLUDING, WITHOUT LIMITATION, ANY INACCURACY OF DATA, LOSS OF
 PROFITS OR DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES, EVEN
 IF SYBASE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES;
 to indemnify, hold harmless, and defend Sybase from and against any claims or
 lawsuits, including attorney's fees, that arise from or are related to the
 modified Code or from use of the modified Code.
 
 */

/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.3.4.285
*/ 

#import "BFOperationReplay.h"
#import "BFOperationReplay+Internal.h"
#import "BFOperationReplayMetaData.h"
#import "SUPJsonObject.h"
#import "SUPJsonReader.h"
#import "BFSMP_TesterDB.h"
#import "BFSMP_TesterDB+Internal.h"
#import "SUPLocalEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "BFKeyGenerator.h"
#import "BFLocalKeyGenerator.h"
#import "BFKeyGenerator+Internal.h"
#import "BFLocalKeyGenerator+Internal.h"
#import "BFLogRecordImpl.h"

@implementation BFOperationReplay


@synthesize remoteId = _remoteId;
@synthesize component = _component;
@synthesize entityKey = _entityKey;
@synthesize attributes = _attributes;
@synthesize operation = _operation;
@synthesize parameters = _parameters;
@synthesize replayLog = _replayLog;
@synthesize exception = _exception;
@synthesize completed = _completed;
@synthesize requestId = _requestId;


#pragma mark -
#pragma mark Init, dealloc, getInstance
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [BFOperationReplay metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[BFOperationReplay delegate]];
    }
    return self;    
}
- (void)dealloc
{
    self.remoteId = nil;
    self.component = nil;
    self.entityKey = nil;
    self.attributes = nil;
    self.operation = nil;
    self.parameters = nil;
    self.replayLog = nil;
    self.exception = nil;
	[super dealloc];
}
+ (BFOperationReplay*)getInstance
{
     BFOperationReplay* me = [[BFOperationReplay alloc] init];
    [me autorelease];
    return me;
}



#pragma mark -
#pragma mark Property getters and setters

- (int64_t)requestId
{
    return _requestId;
}

- (void)setRemoteId:(NSString*)newRemoteId
{
    if (newRemoteId != self->_remoteId)
    {
        [self->_remoteId release];
        self->_remoteId = [newRemoteId retain];
        self.isDirty = YES;
    }
}

- (void)setComponent:(NSString*)newComponent
{
    if (newComponent != self->_component)
    {
        [self->_component release];
        self->_component = [newComponent retain];
        self.isDirty = YES;
    }
}

- (void)setEntityKey:(NSString*)newEntityKey
{
    if (newEntityKey != self->_entityKey)
    {
        [self->_entityKey release];
        self->_entityKey = [newEntityKey retain];
        self.isDirty = YES;
    }
}

- (void)setAttributes:(NSString*)newAttributes
{
    if (newAttributes != self->_attributes)
    {
        [self->_attributes release];
        self->_attributes = [newAttributes retain];
        self.isDirty = YES;
    }
}

- (void)setOperation:(NSString*)newOperation
{
    if (newOperation != self->_operation)
    {
        [self->_operation release];
        self->_operation = [newOperation retain];
        self.isDirty = YES;
    }
}

- (void)setParameters:(NSString*)newParameters
{
    if (newParameters != self->_parameters)
    {
        [self->_parameters release];
        self->_parameters = [newParameters retain];
        self.isDirty = YES;
    }
}

- (void)setReplayLog:(NSString*)newReplayLog
{
    if (newReplayLog != self->_replayLog)
    {
        [self->_replayLog release];
        self->_replayLog = [newReplayLog retain];
        self.isDirty = YES;
    }
}

- (void)setException:(NSString*)newException
{
    if (newException != self->_exception)
    {
        [self->_exception release];
        self->_exception = [newException retain];
        self.isDirty = YES;
    }
}

- (void)setCompleted:(BOOL)newCompleted
{
    if (newCompleted != self->_completed)
    {
        self->_completed = newCompleted;
        self.isDirty = YES;
    }
}

- (void)setRequestId:(int64_t)newRequestId
{
    if (newRequestId != self->_requestId)
    {
        self->_requestId = newRequestId;
        self.isNew = YES;
    }
}

#pragma mark -
#pragma mark Metadata methods

static SUPEntityMetaDataRBS* BFOperationReplay_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (BFOperationReplay_META_DATA == nil) {
		BFOperationReplay_META_DATA = [[BFOperationReplayMetaData alloc] init];
	}
	
	return BFOperationReplay_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

#pragma mark -
#pragma mark Clear relationship objects

- (void)clearRelationshipObjects
{
}

#pragma mark -
#pragma mark find() and related methods
+ (id)allocInitialTraceRequest:(NSString*)method withSkip:(int32_t)skip withTake:(int32_t)take withSql:(NSString*)sql withValues:(SUPObjectList*)values
{
    id request = nil;
    
    CFSCTraceLevel level = [SUPCFSCTrace getTraceLevel];
    NSMutableString *params = [[[NSMutableString alloc] init] autorelease];

    for (id val in values)
    {
        [params appendFormat:@"%@;", [SUPStringUtil toString_object:val]];
    }
    if (skip >=0)
    	[params appendFormat:@"skip=%d;", skip];
    if (take >= 0)
        [params appendFormat:@"take=%d", take];
    if (level == CFSCTraceLevel_DETAIL)
    {
        
        request = [[SUPCFSCTraceDetailRequest alloc] initWithParams:@"BFOperationReplay" :method :nil:nil:[NSDate date] :nil :0
                                                                   :nil :NO :NO :NO :NO :NO :sql :params];
    } else if (level == CFSCTraceLevel_NORMAL)
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFOperationReplay"  :method :nil :nil  :[NSDate date] :nil :0 :params];
    }
    return request;
}
+ (void)finishTraceRequest:(id)request :(int)rows
{
    if (!request)
    {
        return;
    }
    
    SUPCFSCTraceRequest *traceReq = (SUPCFSCTraceRequest *)request;
    
    traceReq.endTime = [NSDate date];
  
    traceReq.count = rows;
    
    [SUPCFSCTrace log:(id)request];
}

+ (BFOperationReplay*)find:(int64_t)id_
{
    SUPCFSCTraceRequest* request = nil;
    NSString *msg = @"success";
    if ([SUPCFSCTrace isEnabled])
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFOperationReplay" :@"find" 
            :nil :[self metaData].synchronizationGroup  :[NSDate date] :nil :0 :[SUPStringUtil toString_object:[NSNumber numberWithLongLong:id_]]];
    } 
    BFOperationReplay* result = nil;
    @try {
         SUPObjectList *keys = [SUPObjectList getInstance];
         [keys add:[NSNumber numberWithLongLong:id_]];
         result = (BFOperationReplay*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
         return result;
     }
     @catch (NSException *e) {
        msg = [NSString stringWithFormat:@"fail in BFOperationReplay--find: %@:%@", [e name], [e reason]];        
        CFSCTraceLogError(msg);
        @throw e;
    }
    @finally
    {
        if (request)
        {
            request.endTime = [NSDate date];
            if ([msg isEqualToString:@"success"])
                request.count = 1;

            [SUPCFSCTrace log:(id)request];
            [request release];
        }
    }
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longLongValue];
}

+ (BFOperationReplay*)load:(int64_t)id_
{
    return (BFOperationReplay*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLongLong:id_]];
}
#pragma mark -
#pragma mark Log record methods

- (SUPObjectList*)getLogRecords
{
   return [BFLogRecordImpl findByEntity:@"OperationReplay":[self keyToString]];
}




#pragma mark -
#pragma mark Description implemetation

- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	OperationReplay = \n\
	    remoteId = %@,\n\
	    component = %@,\n\
	    entityKey = %@,\n\
	    attributes = %@,\n\
	    operation = %@,\n\
	    parameters = %@,\n\
	    replayLog = %@,\n\
	    exception = %@,\n\
	    completed = %i,\n\
	    requestId = %qi,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.remoteId
    	,self.component
    	,self.entityKey
    	,self.attributes
    	,self.operation
    	,self.parameters
    	,self.replayLog
    	,self.exception
    	,self.completed
    	,self.requestId
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}




#pragma mark - 
#pragma mark Delegate method (internal)

static SUPLocalEntityDelegate *g_BFOperationReplay_delegate = nil;

+ (SUPLocalEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_BFOperationReplay_delegate == nil) {
			g_BFOperationReplay_delegate = [[SUPLocalEntityDelegate alloc] initWithName:@"BFOperationReplay" clazz:[self class]
				metaData:[self metaData] dbDelegate:[BFSMP_TesterDB delegate] database:[BFSMP_TesterDB instance]];
		}
	}
	
	return [[g_BFOperationReplay_delegate retain] autorelease];
}

#pragma mark -
#pragma mark JSON methods (internal)


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_ :(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
    if(jsonArray == nil)
        return nil;
    
    SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
    [instanceList autorelease];
    if(instanceList == nil)
        return nil;

    for (SUPJsonObject* jsonObject in jsonArray)
    {
        BFOperationReplay* inst = [[BFOperationReplay alloc] init];
        [inst readJson:jsonObject];
        [instanceList add:inst];
        [inst release];
    }
    return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
    SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
    [jsonArray autorelease];
    for (BFOperationReplay* inst in instanceList)
    {
        SUPJsonObject *o = [[SUPJsonObject alloc] init];
        [inst writeJson:o];
        [jsonArray add:o];
        [o release];
    }
    return jsonArray;
}

#pragma mark -
#pragma mark Internal attribute get/set methods
-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 96:
        return self.requestId;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_ :(SUPLong)v
{
    switch(id_)
    {
    case 96:
        self.requestId = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 102:
        return self.replayLog;
    case 103:
        return self.exception;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_ :(SUPString)v
{
    switch(id_)
    {
    case 102:
        self.replayLog = v;
        break;;
    case 103:
        self.exception = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 95:
        return self.remoteId;
    case 97:
        return self.component;
    case 98:
        return self.entityKey;
    case 99:
        return self.attributes;
    case 100:
        return self.operation;
    case 101:
        return self.parameters;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_ :(SUPString)v
{
    switch(id_)
    {
    case 95:
        self.remoteId = v;
        break;;
    case 97:
        self.component = v;
        break;;
    case 98:
        self.entityKey = v;
        break;;
    case 99:
        self.attributes = v;
        break;;
    case 100:
        self.operation = v;
        break;;
    case 101:
        self.parameters = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPBoolean) getAttributeBoolean:(int)id_
{
    switch(id_)
    {
    case 104:
        return self.completed;
    default:
         return [super getAttributeBoolean:id_];
    }
}

-(void) setAttributeBoolean:(int)id_ :(SUPBoolean)v
{
    switch(id_)
    {
    case 104:
        self.completed = v;
        break;;
    default:
        [super setAttributeBoolean:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_ :(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}



#pragma mark -
#pragma mark Object queries and operation implementations

/*!
  @method
  @abstract Generated class method 
  @throws SUPPersistenceException
 */
+ (void)replay
{
    //replay
    // TODO: implement
        NSString *typeStr = @"void";  
    	NSArray  *args = [NSArray arrayWithObjects:typeStr, nil];
    	SUPPersistenceException* e = [SUPPersistenceException persistenceExceptionWithErrorCode:ERR_NOT_IMPLEMENTED message:@"" arguments:args];
        @throw e;
}

/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)mbsReplay
{
    //mbsReplay
    // TODO: implement
        NSString *typeStr = @"void";  
    	NSArray  *args = [NSArray arrayWithObjects:typeStr, nil];
    	SUPPersistenceException* e = [SUPPersistenceException persistenceExceptionWithErrorCode:ERR_NOT_IMPLEMENTED message:@"" arguments:args];
        @throw e;
}

/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)saveErrorInfo
{
    //saveErrorInfo
    // TODO: implement
        NSString *typeStr = @"void";  
    	NSArray  *args = [NSArray arrayWithObjects:typeStr, nil];
    	SUPPersistenceException* e = [SUPPersistenceException persistenceExceptionWithErrorCode:ERR_NOT_IMPLEMENTED message:@"" arguments:args];
        @throw e;
}



+ (SUPObjectList*)findReadyToReplay:(NSString*)remoteId
{
	return [self findReadyToReplay:remoteId skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findReadyToReplay:(NSString*)remoteId skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:211] autorelease];
	[_selectSQL appendString:@" r.\"a\",r.\"c\",r.\"d\",r.\"e\",r.\"f\",r.\"g\",r.\"h\",r.\"i\",r.\"j\",r.\"b\" from \"smp_tester_1_0_operationreplay\" r where r.\"a\" = ? and r.\"j\" = 0 and r.\"l\" = 0 and r.\"m\" is null order by r.\"b\""];
	SUPObjectList* result = nil;
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:remoteId];
	id request = [[self class] allocInitialTraceRequest:@"findReadyToReplay" withSkip:skip withTake:take withSql:sql withValues:values ];
	result = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[BFOperationReplay class]];
	[[self class] finishTraceRequest:request :[result size]];
	[request release];
	return result;
}



+ (SUPObjectList*)findAsyncOperationToReplay:(NSString*)remoteId
{
	return [self findAsyncOperationToReplay:remoteId skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAsyncOperationToReplay:(NSString*)remoteId skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:215] autorelease];
	[_selectSQL appendString:@" r.\"a\",r.\"c\",r.\"d\",r.\"e\",r.\"f\",r.\"g\",r.\"h\",r.\"i\",r.\"j\",r.\"b\" from \"smp_tester_1_0_operationreplay\" r where r.\"a\" = ? and r.\"j\" = 0 and r.\"l\" = 0 and r.\"m\" is not null order by r.\"b\""];
	SUPObjectList* result = nil;
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:remoteId];
	id request = [[self class] allocInitialTraceRequest:@"findAsyncOperationToReplay" withSkip:skip withTake:take withSql:sql withValues:values ];
	result = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[BFOperationReplay class]];
	[[self class] finishTraceRequest:request :[result size]];
	[request release];
	return result;
}



+ (SUPObjectList*)findReadyToFinish
{
	return [self findReadyToFinish:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findReadyToFinish:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:159] autorelease];
	[_selectSQL appendString:@" r.\"a\",r.\"c\",r.\"d\",r.\"e\",r.\"f\",r.\"g\",r.\"h\",r.\"i\",r.\"j\",r.\"b\" from \"smp_tester_1_0_operationreplay\" r where r.\"j\" = 1 order by r.\"b\""];
	SUPObjectList* result = nil;
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	id request = [[self class] allocInitialTraceRequest:@"findReadyToFinish" withSkip:skip withTake:take withSql:sql withValues:values ];
	result = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[BFOperationReplay class]];
	[[self class] finishTraceRequest:request :[result size]];
	[request release];
	return result;
}

@end