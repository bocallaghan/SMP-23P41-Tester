
/* Copyright (c) Sybase, Inc. 2010-2013   All rights reserved.
 
 In addition to the license terms set out in the Sybase License Agreement for
 the Sybase Unwired Platform ("Program"), the following additional or different
 rights and accompanying obligations and restrictions shall apply to the source
 code in this file ("Code").  Sybase grants you a limited, non-exclusive,
 non-transferable, revocable license to use, reproduce, and modify the Code
 solely for purposes of (i) maintaining the Code as reference material to better
 understand the operation of the Program, and (ii) development and testing of
 applications created in connection with your licensed use of the Program.
 The Code may not be transferred, sold, assigned, sublicensed or otherwise
 conveyed (whether by operation of law or otherwise) to another party without
 Sybase's prior written consent.  The following provisions shall apply to any
 modifications you make to the Code: (i) Sybase will not provide any maintenance
 or support for modified Code or problems that result from use of modified Code;
 (ii) Sybase expressly disclaims any warranties and conditions, express or
 implied, relating to modified Code or any problems that result from use of the
 modified Code;OT BE LIABLE FOR ANY LOSS OR DAMAGE RELATING
 TO MODIFICATIONS MADE TO THE CODE OR FOR ANY DAMAGES RESULTING FROM USE OF THE
 MODIFIED CODE, INCLUDING, WITHOUT LIMITATION, ANY INACCURACY OF DATA, LOSS OF
 PROFITS OR DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES, EVEN
 IF SYBASE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES;
 to indemnify, hold harmless, and defend Sybase from and against any claims or
 lawsuits, including attorney's fees, that arise from or are related to the
 modified Code or from use of the modified Code.
 
 */

/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.3.4.285
*/ 

#import "BFOfflineAuthentication.h"
#import "BFOfflineAuthentication+Internal.h"
#import "BFOfflineAuthenticationMetaData.h"
#import "SUPJsonObject.h"
#import "SUPJsonReader.h"
#import "BFSMP_TesterDB.h"
#import "BFSMP_TesterDB+Internal.h"
#import "SUPLocalEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "BFKeyGenerator.h"
#import "BFLocalKeyGenerator.h"
#import "BFKeyGenerator+Internal.h"
#import "BFLocalKeyGenerator+Internal.h"
#import "BFLogRecordImpl.h"

@implementation BFOfflineAuthentication


@synthesize passwordHash = _passwordHash;
@synthesize user = _user;


#pragma mark -
#pragma mark Init, dealloc, getInstance
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [BFOfflineAuthentication metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[BFOfflineAuthentication delegate]];
    }
    return self;    
}
- (void)dealloc
{
    self.user = nil;
	[super dealloc];
}
+ (BFOfflineAuthentication*)getInstance
{
     BFOfflineAuthentication* me = [[BFOfflineAuthentication alloc] init];
    [me autorelease];
    return me;
}



#pragma mark -
#pragma mark Property getters and setters

- (NSString*)user
{
    return _user;
}

- (void)setPasswordHash:(int32_t)newPasswordHash
{
    if (newPasswordHash != self->_passwordHash)
    {
        self->_passwordHash = newPasswordHash;
        self.isDirty = YES;
    }
}

- (void)setUser:(NSString*)newUser
{
    if (newUser != self->_user)
    {
        [self->_user release];
        self->_user = [newUser retain];
        self.isNew = YES;
    }
}

#pragma mark -
#pragma mark Metadata methods

static SUPEntityMetaDataRBS* BFOfflineAuthentication_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (BFOfflineAuthentication_META_DATA == nil) {
		BFOfflineAuthentication_META_DATA = [[BFOfflineAuthenticationMetaData alloc] init];
	}
	
	return BFOfflineAuthentication_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

#pragma mark -
#pragma mark Clear relationship objects

- (void)clearRelationshipObjects
{
}

#pragma mark -
#pragma mark find() and related methods
+ (id)allocInitialTraceRequest:(NSString*)method withSkip:(int32_t)skip withTake:(int32_t)take withSql:(NSString*)sql withValues:(SUPObjectList*)values
{
    id request = nil;
    
    CFSCTraceLevel level = [SUPCFSCTrace getTraceLevel];
    NSMutableString *params = [[[NSMutableString alloc] init] autorelease];

    for (id val in values)
    {
        [params appendFormat:@"%@;", [SUPStringUtil toString_object:val]];
    }
    if (skip >=0)
    	[params appendFormat:@"skip=%d;", skip];
    if (take >= 0)
        [params appendFormat:@"take=%d", take];
    if (level == CFSCTraceLevel_DETAIL)
    {
        
        request = [[SUPCFSCTraceDetailRequest alloc] initWithParams:@"BFOfflineAuthentication" :method :nil:nil:[NSDate date] :nil :0
                                                                   :nil :NO :NO :NO :NO :NO :sql :params];
    } else if (level == CFSCTraceLevel_NORMAL)
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFOfflineAuthentication"  :method :nil :nil  :[NSDate date] :nil :0 :params];
    }
    return request;
}
+ (void)finishTraceRequest:(id)request :(int)rows
{
    if (!request)
    {
        return;
    }
    
    SUPCFSCTraceRequest *traceReq = (SUPCFSCTraceRequest *)request;
    
    traceReq.endTime = [NSDate date];
  
    traceReq.count = rows;
    
    [SUPCFSCTrace log:(id)request];
}

+ (BFOfflineAuthentication*)find:(NSString*)id_
{
    SUPCFSCTraceRequest* request = nil;
    NSString *msg = @"success";
    if ([SUPCFSCTrace isEnabled])
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFOfflineAuthentication" :@"find" 
            :nil :[self metaData].synchronizationGroup  :[NSDate date] :nil :0 :[SUPStringUtil toString_object:id_]];
    } 
    BFOfflineAuthentication* result = nil;
    @try {
         SUPObjectList *keys = [SUPObjectList getInstance];
         [keys add:id_];
         result = (BFOfflineAuthentication*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
         return result;
     }
     @catch (NSException *e) {
        msg = [NSString stringWithFormat:@"fail in BFOfflineAuthentication--find: %@:%@", [e name], [e reason]];        
        CFSCTraceLogError(msg);
        @throw e;
    }
    @finally
    {
        if (request)
        {
            request.endTime = [NSDate date];
            if ([msg isEqualToString:@"success"])
                request.count = 1;

            [SUPCFSCTrace log:(id)request];
            [request release];
        }
    }
}

- (NSString*)_pk
{
    return (NSString*)[self i_pk];
}

+ (BFOfflineAuthentication*)load:(NSString*)id_
{
    return (BFOfflineAuthentication*)[(SUPEntityDelegate*)([[self class] delegate]) load:id_];
}
#pragma mark -
#pragma mark Log record methods

- (SUPObjectList*)getLogRecords
{
   return [BFLogRecordImpl findByEntity:@"OfflineAuthentication":[self keyToString]];
}




#pragma mark -
#pragma mark Description implemetation

- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	OfflineAuthentication = \n\
	    passwordHash = %i,\n\
	    user = %@,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.passwordHash
    	,self.user
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}




#pragma mark - 
#pragma mark Delegate method (internal)

static SUPLocalEntityDelegate *g_BFOfflineAuthentication_delegate = nil;

+ (SUPLocalEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_BFOfflineAuthentication_delegate == nil) {
			g_BFOfflineAuthentication_delegate = [[SUPLocalEntityDelegate alloc] initWithName:@"BFOfflineAuthentication" clazz:[self class]
				metaData:[self metaData] dbDelegate:[BFSMP_TesterDB delegate] database:[BFSMP_TesterDB instance]];
		}
	}
	
	return [[g_BFOfflineAuthentication_delegate retain] autorelease];
}

#pragma mark -
#pragma mark JSON methods (internal)


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_ :(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
    if(jsonArray == nil)
        return nil;
    
    SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
    [instanceList autorelease];
    if(instanceList == nil)
        return nil;

    for (SUPJsonObject* jsonObject in jsonArray)
    {
        BFOfflineAuthentication* inst = [[BFOfflineAuthentication alloc] init];
        [inst readJson:jsonObject];
        [instanceList add:inst];
        [inst release];
    }
    return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
    SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
    [jsonArray autorelease];
    for (BFOfflineAuthentication* inst in instanceList)
    {
        SUPJsonObject *o = [[SUPJsonObject alloc] init];
        [inst writeJson:o];
        [jsonArray add:o];
        [o release];
    }
    return jsonArray;
}

#pragma mark -
#pragma mark Internal attribute get/set methods
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 218:
        return self.user;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_ :(SUPString)v
{
    switch(id_)
    {
    case 218:
        self.user = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 219:
        return self.passwordHash;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_ :(SUPInt)v
{
    switch(id_)
    {
    case 219:
        self.passwordHash = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_ :(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

@end