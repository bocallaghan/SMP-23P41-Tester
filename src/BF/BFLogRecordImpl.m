
/* Copyright (c) Sybase, Inc. 2010-2013   All rights reserved.
 
 In addition to the license terms set out in the Sybase License Agreement for
 the Sybase Unwired Platform ("Program"), the following additional or different
 rights and accompanying obligations and restrictions shall apply to the source
 code in this file ("Code").  Sybase grants you a limited, non-exclusive,
 non-transferable, revocable license to use, reproduce, and modify the Code
 solely for purposes of (i) maintaining the Code as reference material to better
 understand the operation of the Program, and (ii) development and testing of
 applications created in connection with your licensed use of the Program.
 The Code may not be transferred, sold, assigned, sublicensed or otherwise
 conveyed (whether by operation of law or otherwise) to another party without
 Sybase's prior written consent.  The following provisions shall apply to any
 modifications you make to the Code: (i) Sybase will not provide any maintenance
 or support for modified Code or problems that result from use of modified Code;
 (ii) Sybase expressly disclaims any warranties and conditions, express or
 implied, relating to modified Code or any problems that result from use of the
 modified Code;OT BE LIABLE FOR ANY LOSS OR DAMAGE RELATING
 TO MODIFICATIONS MADE TO THE CODE OR FOR ANY DAMAGES RESULTING FROM USE OF THE
 MODIFIED CODE, INCLUDING, WITHOUT LIMITATION, ANY INACCURACY OF DATA, LOSS OF
 PROFITS OR DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES, EVEN
 IF SYBASE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES;
 to indemnify, hold harmless, and defend Sybase from and against any claims or
 lawsuits, including attorney's fees, that arise from or are related to the
 modified Code or from use of the modified Code.
 
 */

/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.3.4.285
*/ 

#import "BFLogRecordImpl.h"
#import "BFLogRecordImpl+Internal.h"
#import "BFLogRecordImplMetaData.h"
#import "SUPJsonObject.h"
#import "SUPJsonReader.h"
#import "BFSMP_TesterDB.h"
#import "BFSMP_TesterDB+Internal.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "BFKeyGenerator.h"
#import "BFLocalKeyGenerator.h"
#import "BFKeyGenerator+Internal.h"
#import "BFLocalKeyGenerator+Internal.h"

@implementation BFLogRecordImpl


@synthesize level = _level;
@synthesize code = _code;
@synthesize eisCode = _eisCode;
@synthesize message = _message;
@synthesize component = _component;
@synthesize entityKey = _entityKey;
@synthesize operation = _operation;
@synthesize requestId = _requestId;
@synthesize timestamp = _timestamp;
@synthesize messageId = _messageId;


#pragma mark -
#pragma mark Init, dealloc, getInstance
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [BFLogRecordImpl metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[BFLogRecordImpl delegate]];
    }
    return self;    
}
- (void)dealloc
{
    self.eisCode = nil;
    self.message = nil;
    self.component = nil;
    self.entityKey = nil;
    self.operation = nil;
    self.requestId = nil;
    self.timestamp = nil;
	[super dealloc];
}
+ (BFLogRecordImpl*)getInstance
{
     BFLogRecordImpl* me = [[BFLogRecordImpl alloc] init];
    [me autorelease];
    return me;
}



#pragma mark -
#pragma mark Property getters and setters

- (int64_t)messageId
{
    return _messageId;
}

- (void)setLevel:(int32_t)newLevel
{
    if (newLevel != self->_level)
    {
        self->_level = newLevel;
        self.isDirty = YES;
    }
}

- (void)setCode:(int32_t)newCode
{
    if (newCode != self->_code)
    {
        self->_code = newCode;
        self.isDirty = YES;
    }
}

- (void)setEisCode:(NSString*)newEisCode
{
    if (newEisCode != self->_eisCode)
    {
        [self->_eisCode release];
        self->_eisCode = [newEisCode retain];
        self.isDirty = YES;
    }
}

- (void)setMessage:(NSString*)newMessage
{
    if (newMessage != self->_message)
    {
        [self->_message release];
        self->_message = [newMessage retain];
        self.isDirty = YES;
    }
}

- (void)setComponent:(NSString*)newComponent
{
    if (newComponent != self->_component)
    {
        [self->_component release];
        self->_component = [newComponent retain];
        self.isDirty = YES;
    }
}

- (void)setEntityKey:(NSString*)newEntityKey
{
    if (newEntityKey != self->_entityKey)
    {
        [self->_entityKey release];
        self->_entityKey = [newEntityKey retain];
        self.isDirty = YES;
    }
}

- (void)setOperation:(NSString*)newOperation
{
    if (newOperation != self->_operation)
    {
        [self->_operation release];
        self->_operation = [newOperation retain];
        self.isDirty = YES;
    }
}

- (void)setRequestId:(NSString*)newRequestId
{
    if (newRequestId != self->_requestId)
    {
        [self->_requestId release];
        self->_requestId = [newRequestId retain];
        self.isDirty = YES;
    }
}

- (void)setTimestamp:(NSDate*)newTimestamp
{
    if (newTimestamp != self->_timestamp)
    {
        [self->_timestamp release];
        self->_timestamp = [newTimestamp retain];
        self.isDirty = YES;
    }
}

- (void)setMessageId:(int64_t)newMessageId
{
    if (newMessageId != self->_messageId)
    {
        self->_messageId = newMessageId;
        self.isNew = YES;
    }
}

#pragma mark -
#pragma mark Metadata methods

static SUPEntityMetaDataRBS* BFLogRecordImpl_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (BFLogRecordImpl_META_DATA == nil) {
		BFLogRecordImpl_META_DATA = [[BFLogRecordImplMetaData alloc] init];
	}
	
	return BFLogRecordImpl_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

#pragma mark -
#pragma mark Clear relationship objects

- (void)clearRelationshipObjects
{
}

#pragma mark -
#pragma mark Callback handler getter/setter

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
#pragma mark -
#pragma mark find() and related methods
+ (id)allocInitialTraceRequest:(NSString*)method withSkip:(int32_t)skip withTake:(int32_t)take withSql:(NSString*)sql withValues:(SUPObjectList*)values
{
    id request = nil;
    
    CFSCTraceLevel level = [SUPCFSCTrace getTraceLevel];
    NSMutableString *params = [[[NSMutableString alloc] init] autorelease];

    for (id val in values)
    {
        [params appendFormat:@"%@;", [SUPStringUtil toString_object:val]];
    }
    if (skip >=0)
    	[params appendFormat:@"skip=%d;", skip];
    if (take >= 0)
        [params appendFormat:@"take=%d", take];
    if (level == CFSCTraceLevel_DETAIL)
    {
        
        request = [[SUPCFSCTraceDetailRequest alloc] initWithParams:@"BFLogRecordImpl" :method :nil:nil:[NSDate date] :nil :0
                                                                   :nil :NO :NO :NO :NO :NO :sql :params];
    } else if (level == CFSCTraceLevel_NORMAL)
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFLogRecordImpl"  :method :nil :nil  :[NSDate date] :nil :0 :params];
    }
    return request;
}
+ (void)finishTraceRequest:(id)request :(int)rows
{
    if (!request)
    {
        return;
    }
    
    SUPCFSCTraceRequest *traceReq = (SUPCFSCTraceRequest *)request;
    
    traceReq.endTime = [NSDate date];
  
    traceReq.count = rows;
    
    [SUPCFSCTrace log:(id)request];
}

+ (BFLogRecordImpl*)find:(int64_t)id_
{
    SUPCFSCTraceRequest* request = nil;
    NSString *msg = @"success";
    if ([SUPCFSCTrace isEnabled])
    {
        request = [[SUPCFSCTraceRequest alloc] initWithParams:@"BFLogRecordImpl" :@"find" 
            :nil :[self metaData].synchronizationGroup  :[NSDate date] :nil :0 :[SUPStringUtil toString_object:[NSNumber numberWithLongLong:id_]]];
    } 
    BFLogRecordImpl* result = nil;
    @try {
         SUPObjectList *keys = [SUPObjectList getInstance];
         [keys add:[NSNumber numberWithLongLong:id_]];
         result = (BFLogRecordImpl*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
         return result;
     }
     @catch (NSException *e) {
        msg = [NSString stringWithFormat:@"fail in BFLogRecordImpl--find: %@:%@", [e name], [e reason]];        
        CFSCTraceLogError(msg);
        @throw e;
    }
    @finally
    {
        if (request)
        {
            request.endTime = [NSDate date];
            if ([msg isEqualToString:@"success"])
                request.count = 1;

            [SUPCFSCTrace log:(id)request];
            [request release];
        }
    }
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[BFLogRecordImpl class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longLongValue];
}

+ (BFLogRecordImpl*)load:(int64_t)id_
{
    return (BFLogRecordImpl*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLongLong:id_]];
}
#pragma mark -
#pragma mark submitPending(), getLastOperation(), state methods

- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (BFLogRecordImpl*)getDownloadState
{
    return (BFLogRecordImpl*)[self i_getDownloadState];
}

- (BFLogRecordImpl*) getOriginalState
{
    return (BFLogRecordImpl*)[self i_getOriginalState];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}
#pragma mark -
#pragma mark Log record methods

- (SUPObjectList*)getLogRecords
{
   return [BFLogRecordImpl findByEntity:@"LogRecordImpl":[self keyToString]];
}




#pragma mark -
#pragma mark Description implemetation

- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	LogRecordImpl = \n\
	    level = %i,\n\
	    code = %i,\n\
	    eisCode = %@,\n\
	    message = %@,\n\
	    component = %@,\n\
	    entityKey = %@,\n\
	    operation = %@,\n\
	    requestId = %@,\n\
	    timestamp = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    messageId = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.level
    	,self.code
    	,self.eisCode
    	,self.message
    	,self.component
    	,self.entityKey
    	,self.operation
    	,self.requestId
    	,self.timestamp
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.messageId
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}



+ (SUPObjectList *)findByEntity:(NSString*)entityName :(NSString*)keyValue
{
    SUPQuery *query = [SUPAbstractEntityRBS getLogRecordQuery:entityName:keyValue];
    SUPObjectList *logList = [BFLogRecordImpl findWithQuery:query];
    return logList;    
}

#pragma mark - 
#pragma mark Delegate method (internal)

static SUPEntityDelegate *g_BFLogRecordImpl_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_BFLogRecordImpl_delegate == nil) {
			g_BFLogRecordImpl_delegate = [[SUPEntityDelegate alloc] initWithName:@"BFLogRecordImpl" clazz:[self class]
				metaData:[self metaData] dbDelegate:[BFSMP_TesterDB delegate] database:[BFSMP_TesterDB instance]];
		}
	}
	
	return [[g_BFLogRecordImpl_delegate retain] autorelease];
}

#pragma mark -
#pragma mark JSON methods (internal)


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_ :(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
    if(jsonArray == nil)
        return nil;
    
    SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
    [instanceList autorelease];
    if(instanceList == nil)
        return nil;

    for (SUPJsonObject* jsonObject in jsonArray)
    {
        BFLogRecordImpl* inst = [[BFLogRecordImpl alloc] init];
        [inst readJson:jsonObject];
        [instanceList add:inst];
        [inst release];
    }
    return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
    SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
    [jsonArray autorelease];
    for (BFLogRecordImpl* inst in instanceList)
    {
        SUPJsonObject *o = [[SUPJsonObject alloc] init];
        [inst writeJson:o];
        [jsonArray add:o];
        [o release];
    }
    return jsonArray;
}

#pragma mark -
#pragma mark Internal attribute get/set methods
-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 68:
        return self.messageId;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_ :(SUPLong)v
{
    switch(id_)
    {
    case 68:
        self.messageId = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 71:
        return self.eisCode;
    case 72:
        return self.message;
    case 73:
        return self.component;
    case 74:
        return self.entityKey;
    case 75:
        return self.operation;
    case 76:
        return self.requestId;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_ :(SUPString)v
{
    switch(id_)
    {
    case 71:
        self.eisCode = v;
        break;;
    case 72:
        self.message = v;
        break;;
    case 73:
        self.component = v;
        break;;
    case 74:
        self.entityKey = v;
        break;;
    case 75:
        self.operation = v;
        break;;
    case 76:
        self.requestId = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPNullableDateTime) getAttributeNullableDateTime:(int)id_
{
    switch(id_)
    {
    case 77:
        return self.timestamp;
    default:
         return [super getAttributeNullableDateTime:id_];
    }
}

-(void) setAttributeNullableDateTime:(int)id_ :(SUPNullableDateTime)v
{
    switch(id_)
    {
    case 77:
        self.timestamp = v;
        break;;
    default:
        [super setAttributeNullableDateTime:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 69:
        return self.level;
    case 70:
        return self.code;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_ :(SUPInt)v
{
    switch(id_)
    {
    case 69:
        self.level = v;
        break;;
    case 70:
        self.code = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_ :(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}



#pragma mark -
#pragma mark Object queries and operation implementations
/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end